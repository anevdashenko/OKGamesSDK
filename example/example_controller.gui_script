--- @type OKGamesSDK
local OKGames = require("OKGames.okgames")
local OKGamesMock = require("OKGames.utils.mock")

local ID_CONTROL_PANEL = hash("control_panel")
local ID_BUTTON_SHOW_AD = hash("button_show_ad")
local ID_BUTTON_SHOW_REWARDED_AD = hash("button_show_rewarded_ad")
local ID_BUTTON_SHOW_PAYMENT = hash("button_show_payment")
local ID_BUTTON_SHOW_INVITE = hash("button_show_invite")

local ID_BUTTON_SET_PAGE_SIZE = hash("button_set_page_size")
local ID_BUTTON_GET_PAGE_SIZE = hash("button_get_page_info")

local ID_TEXT_LOG = hash("text_log")

local ACTION_TOUCH = hash("touch")

local AD_STATE = {
	NOT_LOADED = 1,
	LOADING = 2,
	LOADED = 3,
	SHOW = 4
}

local function set_text_log(self, text)
	gui.set_text(self.view.text_log, text or "")
end

local function show_invite(self)
	local options = {
		text = "Play with me!"
	}
	OKGames:show_invite(options, function(invite_result)
		pprint("Invite result", invite_result)
	end)
end

local function is_ad_process(ad_status)
	return ad_status == AD_STATE.LOADING or ad_status == AD_STATE.SHOW
end

local function show_ad(self)
	print("show ad")
	OKGames:show_interstitial_ad(function(result_data)
		pprint("Show ad result", result_data)
	end)
end

local function show_rewarded_ad(self)
	print("show rewarded ad", self.rewarded_ad_state)
	if is_ad_process(self.rewarded_ad_state) then
		return
	end

	if self.rewarded_ad_state == AD_STATE.NOT_LOADED then
		self.rewarded_ad_state = AD_STATE.LOADING
		OKGames:load_rewarded_ad(function(result)
			if result.status then
				self.rewarded_ad_state = AD_STATE.LOADED
			else
				self.rewarded_ad_state = AD_STATE.NOT_LOADED
			end
		end)
	end

	if self.rewarded_ad_state == AD_STATE.LOADED then
		self.rewarded_ad_state = AD_STATE.SHOW
		OKGames:show_rewarded_ad(function(result)
			local success = result.status
			self.rewarded_ad_state = AD_STATE.NOT_LOADED
		end)
	end
end

local function show_payment(self)
    print("show payment")

    local test_payment_options = {
        name = "Yabloko 1sht",
        description = "round juicy fruit",
        code = 7354,
        price = 1
    }

    OKGames:show_payments(test_payment_options, function(result)
        pprint("payment complete ", result)
    end)
end

local function show_controls(self)
    gui.set_enabled(self.view.control_panel, true)
end

local function complete_init(self)
	self.is_sdk_init = true
	show_controls(self)
end

local function set_page_size(self)
	local window_size = {
		width = 600,
		height = 1200
	}

	OKGames:set_window_size(window_size)
end

local function get_page_size(self)
	OKGames:get_page_info(function(result_page)
		pprint("page data", result_page)
		if result_page.status and result_page.data then
			local page_data = result_page.data
			set_text_log(self, string.format( "widht =  %d height =%d ", page_data.innerWidth, page_data.innerHeight))
		end
	end)
end

local function init_sdk(self)
	OKGames:setup_mock(OKGamesMock)

	local co = coroutine.create( function()
		local result = OKGames:init_async()
		if not result then
			print("Cant initialize OK sdk")
			return
		end

		local player_data = OKGames:get_current_player_info_async()
		pprint("Current player data", player_data)
		local request_parameters = OKGames:get_request_parameters()
		pprint("Request parameters", request_parameters)
		complete_init(self)
	end)
    self.running_co = co

    local status, error = coroutine.resume(co)
    if not status then
        pprint("Cant init sdk", error)
    end
end

local function add_button(buttons, button_id, fn_button)
	local button_bind = {
		button = gui.get_node(button_id),
		fn_button = fn_button
	}
	table.insert( buttons, button_bind )
end

local function bind_buttons()
	local buttons = {}
	add_button(buttons, ID_BUTTON_SHOW_AD, show_ad)
	add_button(buttons, ID_BUTTON_SHOW_PAYMENT, show_payment)
	add_button(buttons, ID_BUTTON_SHOW_REWARDED_AD, show_rewarded_ad)
	add_button(buttons, ID_BUTTON_SHOW_INVITE, show_invite)
	add_button(buttons, ID_BUTTON_GET_PAGE_SIZE, get_page_size)
	add_button(buttons, ID_BUTTON_SET_PAGE_SIZE, set_page_size)

	return buttons
end

local function init_view(self)
	local view = {}

	view.control_panel = gui.get_node(ID_CONTROL_PANEL)
	--gui.set_enabled(view.control_panel, false)
	view.text_log = gui.get_node(ID_TEXT_LOG)

	view.buttons = bind_buttons()
	self.view = view
end

function init(self)
    msg.post(".", "acquire_input_focus")

	self.rewarded_ad_state = AD_STATE.NOT_LOADED
	self.interstitial_ad_state = AD_STATE.NOT_LOADED

	init_view(self)
	init_sdk(self)
end

function on_input(self, action_id, action)
	if action_id ~= ACTION_TOUCH then
		return false
	end

	for _, button_data in ipairs(self.view.buttons) do
		if gui.pick_node(button_data.button, action.x, action.y) and action.released then
			button_data.fn_button(self)
			return true
		end
	end
end
