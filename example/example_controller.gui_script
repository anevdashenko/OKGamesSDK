local OKGames = require("OKGames.okgames")
local OKGamesMock = require("OKGames.utils.mock")

local ID_CONTROL_PANEL = hash("control_panel")
local ID_BUTTON_SHOW_AD = hash("button_show_ad")
local ID_BUTTON_SHOW_PAYMENT = hash("button_show_payment")

local ACTION_TOUCH = hash("touch")

local function show_ad(self)
	print("show ad")
end

local function show_payment(self)
    print("show payment")

    local test_payment_options = {
        name = "Yabloko 1sht",
        description = "round juicy fruit",
        code = 7354,
        price = 1
    }

    OKGames:show_payments(test_payment_options, function(result)
        pprint("payment complete ", result)
    end)
end

local function show_controls(self)
    gui.set_enabled(self.view.control_panel, true)
end

local function complete_init(self)
	self.is_sdk_init = true
	show_controls(self)
end

local function init_sdk(self)
	OKGames:setup_mock(OKGamesMock)

	local co = coroutine.create( function()
		local result = OKGames:init_async()
		if not result then
			print("Cant initialize OK sdk")
			return
		end

		local player_data = OKGames:get_current_player_info_async()
		pprint("Current player data", player_data)

		complete_init(self)
	end)
    self.running_co = co

    local status, error = coroutine.resume(co)
    if not status then
        pprint("Cant init sdk", error)
    end
end

local function add_button(buttons, button_id, fn_button)
	local button_bind = {
		button = gui.get_node(button_id),
		fn_button = fn_button
	}
	table.insert( buttons, button_bind )
end

local function bind_buttons()
	local buttons = {}
	add_button(buttons, ID_BUTTON_SHOW_AD, show_ad)
	add_button(buttons, ID_BUTTON_SHOW_PAYMENT, show_payment)

	return buttons
end

local function init_view(self)
	local view = {}

	view.control_panel = gui.get_node(ID_CONTROL_PANEL)
	gui.set_enabled(view.control_panel, false)

	view.buttons = bind_buttons()
	self.view = view
end


function init(self)
    msg.post(".", "acquire_input_focus")
	init_view(self)
	init_sdk(self)


end

function on_input(self, action_id, action)
	if action_id ~= ACTION_TOUCH then
		return false
	end

	for _, button_data in ipairs(self.view.buttons) do
		if gui.pick_node(button_data.button, action.x, action.y) and action.released then
			button_data.fn_button(self)
			return true
		end
	end
end
